/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import entities.Token;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import services.OperationService;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class OperationServiceTest {
    OperationService operationService= new OperationService();

    @Test
    public void createUserTest() {
        String user="testUser";
        String password="testPw";
        //create a non-existing user
        operationService.createUser(user,password);
        assertTrue(operationService.userInfo.containsKey(user));
        //create an existing user
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.createUser(user,password));
        String expected="Creation failed for user testUser since user already exists";
        String actual=e.getMessage();
        assertEquals(expected,actual);
    }

    @Test
    public void deleteUserTest() {
        String user="testUser";
        String password="testPw";
        //delete a non-existing user
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.deleteUser(user));
        String expected="Deletion failed for user testUser since user is not exist";
        String actual=e.getMessage();
        assertEquals(expected,actual);
        //delete an existing user
        operationService.createUser(user,password);
        operationService.deleteUser(user);
        assertEquals(0,operationService.userInfo.size());
    }

    @Test
    public void createRoleTest() {
        String role="testRole";
        //create a non-existing role
        operationService.createRole(role);
        assertTrue(operationService.roleInfo.contains(role));
        //create an existing role
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.createRole(role));
        String expected="Creation failed for role testRole since role already exists";
        String actual=e.getMessage();
        assertEquals(expected,actual);
    }

    @Test
    public void deleteRoleTest() {
        String role="testRole";
        //delete a non-existing role
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.deleteRole(role));
        String expected="Deletion failed for role testRole since role is not exist";
        String actual=e.getMessage();
        assertEquals(expected,actual);
        //delete an existing role
        operationService.createRole(role);
        operationService.deleteRole(role);
        assertEquals(0,operationService.roleInfo.size());
    }

    @Test
    public void addRoleTest() {
        String role="testRole";
        String user="testUser";
        String password="pw";
        //add role to a non-existing user
        operationService.addRole(role,user);
        assertNull(operationService.userMap.get(user));
        //add role to an existing user
        operationService.createUser(user,password);
        operationService.addRole(role,user);
        assertTrue(operationService.userMap.get(user).contains(role));
    }

    @Test
    public void checkRoleTest() {
        String role="testRole";
        String user="testUser";
        String password="pw";
        String ss=operationService.encrypt(user+password);
        Token token = new Token(ss);
        //check role for non-existing user
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.checkRole(user,role,token));
        String expected="Invalid token dGVzdFVzZXJwdw==";
        String actual=e.getMessage();
        assertTrue(actual.contains(expected));
        //check role for an existing user with valid token
        operationService.createUser(user,password);
        operationService.addRole(role,user);
        operationService.authenticate(user,password);
        boolean res=operationService.checkRole(user,role,token);
        assertTrue(res);
        //check role for an existing user after invalidating the token
        operationService.invalidate(token);
        Exception e2=Assertions.assertThrows(RuntimeException.class, () -> operationService.checkRole(user,role,token));
        String actual2=e2.getMessage();
        assertTrue(actual2.contains(expected));
    }

    @Test
    public void getAllRoleTest() {
        String role1="testRole1";
        String role2="testRole2";
        String role3="testRole3";
        String user="testUser";
        String password="pw";
        String ss=operationService.encrypt(user+password);
        Token token = new Token(ss);
        token.setTokenTime(0);
        //get all roles for an existing user with invalid token
        operationService.createUser(user,password);
        Exception e=Assertions.assertThrows(RuntimeException.class, () -> operationService.getAllRoles(user,token));
        String expected="Invalid token dGVzdFVzZXJwdw==";
        String actual=e.getMessage();
        assertTrue(actual.contains(expected));
        //get all roles for an existing user with valid token
        operationService.addRole(role1,user);
        operationService.addRole(role2,user);
        operationService.addRole(role3,user);
        operationService.authenticate(user,password);
        token.setTokenTime(10);
        Set<String> res=operationService.getAllRoles(user,token);
        assertTrue(res.contains(role1));
        assertTrue(res.contains(role2));
        assertTrue(res.contains(role3));
    }


}
